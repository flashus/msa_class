# Тут перечисляются глобальные переменные для пайплайна.
# Их мы будем использовать дальше в файле.
# Блок переменных имеет зарезервированное имя variables, которое не должно использоваться в качестве имени шага:
variables:
  JAVA_VERSION: 17
  APP_IMAGE: test-app
  # В переменных можно ссылаться на другие переменные, в том числе те, которые предоставляет GitLab.
  # Таких переменных довольно много, и можно, например, получить информацию о теге коммита:
  APP_TAG: $CI_COMMIT_TAG
  # SONAR_USER_HOME: "$CI_PROJECT_DIR/.sonar"
# GIT_DEPTH: "0"

# Здесь перечислены этапы сборки в нужном порядке.
# Называть этапы можно как угодно:
stages:
- build
- test
- build_image
# - code_quality
- deploy_dev
- smoke
- deploy_test
- regression
- load

# Чтобы использовать результаты сборки на разных шагах, добавим кеш, иначе собрать артефакт с JAR-файлом, полученным на этапе build_app, нельзя:
cache:
  key: "$CI_COMMIT_REF_SLUG-build-cache"
  paths:
  - build/

# Далее описываем шаги сборки. Называть их можно практически как угодно, нельзя лишь использовать зарезервированные имена:
build_app:
  # Привязываем шаг к определённому этапу:
  stage: build
  # Указываем образ, который будет использоваться для выполнения шага:
  # image: openjdk:$JAVA_VERSION
  image: gradle:8.6-jdk$JAVA_VERSION
  # В разделе скрипта задаём команду, которую хотим выполнить:
  script: "./gradlew assemble"
  # script: "chmod +x ./gradlew && ./gradlew assemble"

run_tests:
  stage: test
  # Обратите внимание на переиспользование переменных:
  # image: openjdk:$JAVA_VERSION
  image: gradle:8.6-jdk$JAVA_VERSION
  script: ./gradlew test

run_smoke:
  stage: smoke
  image: gradle:8.6-jdk$JAVA_VERSION
  # services:
  # - postgres:latest
  # variables:
  #   POSTGRES_DB: your_db
  #   POSTGRES_USER: user
  #   POSTGRES_PASSWORD: password
  script: ./gradlew integrationTest --tests ru.idyachenko.users.smoke.SmokeTest

run_regression:
  stage: regression
  image: gradle:8.6-jdk$JAVA_VERSION
  script: ./gradlew integrationTest --tests ru.idyachenko.users.regression.RegressionTest

# run_sonar:
#   stage: code_quality
#   image: gradle:8.6-jdk$JAVA_VERSION
#   cache:
#     key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG-sonar-cache"
#     paths:
#     - ".sonar/cache"
#   script: ./gradlew sonarqube
#   rules:
#   - if: "$CI_BUILD_REF_NAME != 'main' && $CI_PIPELINE_SOURCE == 'push' || $CI_PIPELINE_SOURCE == 'merge_request_event' "

build_artifact:
  stage: build_image
  # Для сборки образа будем использовать механизм docker in docker:
  image: docker:latest
  # Во внутреннем блоке variables можно задавать локальные переменные шага:
  variables:
    DOCKER_TLS_CERTDIR: /certs
  # Раздел services позволяет добавить к сборке ещё несколько образов.
  # Например, для docker in docker нам нужен образ с демоном. 
  # Другой пример: можно добавить БД для интеграционных тестов в отдельном образе.
  # Все эти образы будут работать вместе на текущем шаге:
  services:
  - docker:dind
  # В разделе before_script можно указать шаги, которые необходимо выполнить перед основным скриптом.
  # Обратите внимание на переменные, которых нет в файле пайплайна, они задаются в настройках проекта.
  # Это позволяет хранить чувствительные данные отдельно от кода, причём благодаря ролевой модели GitLab.
  # Доступ к ним можно оставить только администратору или владельцу проекта, что повышает безопасность:
  before_script:
  # - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  - docker login -u $REGISTRY_USER -p $DOCKER_TOKEN
  - apk update && apk add git
  # Если скрипт состоит более чем из одной команды, то удобно использовать list-форму.
  # В этой форме каждая команда записывается в отдельный элемент списка, что повышает читаемость файла:
  script:
  - docker build -t $REGISTRY_USER/$APP_IMAGE:$APP_TAG .
  - docker push $REGISTRY_USER/$APP_IMAGE:$APP_TAG

deploy_artifact_dev:
  stage: deploy_dev
  image:
    name: flashus/k8s_deploy:1.0.0
    entrypoint: ['']
  script:
  - kubectl config get-contexts
  - kubectl config use-context flash.us/msa_class:users-k8s-agent
  - kubectl get pods
  - cd .chart && helm upgrade users-dev . -i -f values-dev.yaml

deploy_artifact_test:
  stage: deploy_test
  image:
    name: flashus/k8s_deploy:1.0.0
    entrypoint: ['']
  script:
  - kubectl config get-contexts
  - kubectl config use-context flash.us/msa_class:users-k8s-agent
  - kubectl get pods
  - cd .chart && helm upgrade users-test . -i -f values-test.yaml

stress_test:
  stage: load
  image: direvius/yandex-tank:latest
  # script:
  # - cd .load && tank run
  script: chmod +x ./load/yandextank.sh && ./load/yandextank.sh
  artifacts:
    paths:
    - yandextank_report
