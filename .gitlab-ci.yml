# Тут перечисляются глобальные переменные для пайплайна.
# Их мы будем использовать дальше в файле.
# Блок переменных имеет зарезервированное имя variables, которое не должно использоваться в качестве имени шага:
variables:
  JAVA_VERSION: 17
  APP_IMAGE: test-app
  # В переменных можно ссылаться на другие переменные, в том числе те, которые предоставляет GitLab.
  # Таких переменных довольно много, и можно, например, получить информацию о теге коммита:
  APP_TAG: $CI_COMMIT_TAG

# Здесь перечислены этапы сборки в нужном порядке.
# Называть этапы можно как угодно:
stages:
- build
- test
- build_image

# Чтобы использовать результаты сборки на разных шагах, добавим кеш, иначе собрать артефакт с JAR-файлом, полученным на этапе build_app, нельзя:
cache:
  key: "$CI_COMMIT_REF_SLUG-build-cache"
  paths:
  - build/

# Далее описываем шаги сборки. Называть их можно практически как угодно, нельзя лишь использовать зарезервированные имена:
build_app:
  # Привязываем шаг к определённому этапу:
  stage: build
  # Указываем образ, который будет использоваться для выполнения шага:
  # image: openjdk:$JAVA_VERSION
  image: gradle:8.6-jdk$JAVA_VERSION
  # В разделе скрипта задаём команду, которую хотим выполнить:
  script: "./gradlew assemble"
  # script: "chmod +x ./gradlew && ./gradlew assemble"

run_tests:
  stage: test
  # Обратите внимание на переиспользование переменных:
  # image: openjdk:$JAVA_VERSION
  image: gradle:8.6-jdk$JAVA_VERSION
  script: ./gradlew check

build_artifact:
  stage: build_image
  # Для сборки образа будем использовать механизм docker in docker:
  image: docker:latest
  # Во внутреннем блоке variables можно задавать локальные переменные шага:
  variables:
    DOCKER_TLS_CERTDIR: /certs
  # Раздел services позволяет добавить к сборке ещё несколько образов.
  # Например, для docker in docker нам нужен образ с демоном. 
  # Другой пример: можно добавить БД для интеграционных тестов в отдельном образе.
  # Все эти образы будут работать вместе на текущем шаге:
  services:
  - docker:dind
  # В разделе before_script можно указать шаги, которые необходимо выполнить перед основным скриптом.
  # Обратите внимание на переменные, которых нет в файле пайплайна, они задаются в настройках проекта.
  # Это позволяет хранить чувствительные данные отдельно от кода, причём благодаря ролевой модели GitLab.
  # Доступ к ним можно оставить только администратору или владельцу проекта, что повышает безопасность:
  before_script:
  - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  # Если скрипт состоит более чем из одной команды, то удобно использовать list-форму.
  # В этой форме каждая команда записывается в отдельный элемент списка, что повышает читаемость файла:
  script:
  - docker build -t $APP_IMAGE:$APP_TAG .
  - docker push $APP_IMAGE:$APP_TAG
